@page "/Employee/AddEmployee/{ID:guid?}"
@using FuelStation.Models.Enums
@using Fuel_Station.Shared

@inject NavigationManager navManager

@inject HttpClient httpClient

@inject IJSRuntime jsRuntime
<h1>@AddorEdit() Employee</h1>
<EditForm Model="@employeeView" OnValidSubmit="@Save">
    <table class=table-stripped>
        <td>
                
                    <InputSelect @bind-Value="newEmployeeType">
                       
                        
                            
                            @foreach(var employeeType in Enum.GetValues(typeof(EmployeeTypeEnum)))
                            {
                                if ((EmployeeTypeEnum)employeeType ==EmployeeTypeEnum.None )
                                {
                                <option value="@employeeType">Select A Employee Type</option>
                                }
                                else
                                {
                                <option value="@employeeType">@employeeType</option>
                                }
                            
                            }   
                            
                               
                    </InputSelect>
               
            </td>
        <tr>
            <th> <label>Name</label></th>
             <input @bind=newName pattern="[A-Za-z]{3,15}" title="It must be between 3 and 15 characters long. Only characters." />
        </tr>
        <tr>
            <th> <label>SurName</label></th>
           <input @bind=newSurname pattern="[A-Za-z]{3,20}" title="It must be between 3 and 20 characters long. Only characters." />

        </tr>
         <tr>
            <th> <label>SalaryPerMonth</label></th>
            <input @bind=salaryPerMonth pattern="[0-9].{0,7}" title="It must be only number.Max 7 digits"/>

        </tr>
        <tr>
            <th> <button type="submit" class="btn btn-primary " @*@onclick="Save"*@>Save</button></th>
            <th><button class="btn btn-danger " @onclick=Goback>Cancel</button></th>
        </tr>

    </table>
</EditForm>
        
         
 

@code {

    EmployeeViewModel employeeView = new EmployeeViewModel();


    [Parameter] public Guid? ID { get; set; }
    private string newName;
    private string newSurname;
    private decimal? salaryPerMonth;
    private EmployeeTypeEnum newEmployeeType;



    protected override async Task OnInitializedAsync()

    {
        newName = null;
        newSurname = null;
        salaryPerMonth = null;


        if (ID != null)
        {
            EmployeeViewModel employee = new EmployeeViewModel(); 
            employee = await httpClient.GetFromJsonAsync<EmployeeViewModel>($"Employee/GetOneEmployee{ID}");

            newName = employee.Name;
            newSurname = employee.Surname;
            salaryPerMonth = employee.SalaryPerMonth;
            newEmployeeType = employee.EmployeeType;


        }



        //isLoading = true;
        //await LoadCustomersFromServer();

        //isLoading = false;
    }

    async Task  Save()
    {

        if(string.IsNullOrEmpty(newName)) return;
        if(string.IsNullOrEmpty(newSurname)) return;
        if(string.IsNullOrEmpty(salaryPerMonth.ToString())) return;
        if(newEmployeeType==EmployeeTypeEnum.None) return;


        if (employeeView == null)
        {
            employeeView = new();
        }
        employeeView.Name = newName;
        employeeView.Surname = newSurname;
        employeeView.SalaryPerMonth = salaryPerMonth.Value;
        employeeView.Status = true;
        employeeView.EmployeeType = newEmployeeType;



        newName = null;
        newSurname = null;

        salaryPerMonth = null;
        newEmployeeType = EmployeeTypeEnum.None;



        if (ID == null)
        {
            await httpClient.PostAsJsonAsync("Employee", employeeView);
        }
        else
        {
            employeeView.ID = ID.Value;
            await httpClient.PutAsJsonAsync("Employee", employeeView);

        }

        navManager.NavigateTo($"/Employee");

    }
    async Task Goback()
    {
        navManager.NavigateTo($"/Employee");
    }

    private string AddorEdit()
    {
        if (ID == null)
        {
            return ("Add");
        }
        return ("Edit");
    }


}

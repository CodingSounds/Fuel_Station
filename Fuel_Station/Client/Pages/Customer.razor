@page "/Customer/{User:guid?}"
@using Fuel_Station.Shared
@inject HttpClient httpClient
@inject IJSRuntime jsRuntime
@inject NavigationManager navManager
<h1>@DeletedCustomers() Customers</h1>

<div>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Fuel Station</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="btn btn-info" href=@($"/Employee/{User}")>Employees</a>
                </li>
                <li class="nav-item">
                    <a class="btn btn-warning" href=@($"/Customer/{User}")>Customers</a>
                </li>
                <li class="nav-item">
                    <a class="btn btn-success" href=@($"/MonthlyLedger/{User}")>Monthly Ledger</a>
                </li>
            </ul>
        </div>
    </nav>
</div>




@*<h3>TodoList - Pending @todoList.Count(x=> !x.Finished) </h3>*@
 @if (ActiveCustomers){

    <button class="btn btn-primary" @onclick="()=>AddCustomer(customerview)" >Add</button>

 }

@if (isLoading)
{
    <tr>
    <div class="spinner-border" role="status"></div>
    </tr>
}
else{
    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                
                <th>Card Number</th>
                
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var customer in customerlist.Where(x=>x.Status==ActiveCustomers))
            {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    @*<td><input type="checkbox" value="@customer.Status" /></td>*@
                    <td>@customer.CardNumber</td>
                     
                     @*<td><button class="btn btn-danger" @onclick="() => EditCustomer(customer)">Edit</button></td>*@
                    @if (ActiveCustomers)
                    {
                        <td><button class="btn btn-success" @onclick="()=>AddCustomer(customer)" >Edit</button></td>
                        <td><button class="btn btn-danger" @onclick="() => DeleteCustomer(User,customer)">Delete</button></td>
                    }
                    else
                    {
                        
                        <td><button class="btn btn-danger" @onclick="() => DeleteCustomer(User,customer)">Undo</button></td>
                        <td><button class="btn btn-dark" @onclick="() => EraseCustomer(customer)">Erase</button></td>
                    }

                        
                    
                    
                </tr>
            }
        </tbody>
    </table>
    @if (ActiveCustomers)
    {<div class="navbar navbar-default navbar-fixed-bottom">
            <div class="container">
        <button class="btn btn-warning btn-sm" @onclick="()=>DeletedorActiveCustomers()">Show Deleted Customers</button>
            </div>  
    </div>
        
    }
    else
    {
       <td><button class="btn btn-secondary" @onclick="()=>DeletedorActiveCustomers()">Back</button></td> 
    }

}

@code{

    [Parameter] public Guid? User { get; set; }


    List<CustomerViewModel> customerlist = new List<CustomerViewModel>();
    private bool isLoading = false;
    private string NewName;
    private string NewSurname;
    private string NewTIN;
    private string NewPhone;
    private CustomerViewModel customerview;
    private  bool ActiveCustomers = true;
    private string Textforwhichlisttoshow = "Show Deleted Customers";

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadCustomersFromServer(User.Value);
        isLoading = false;
    }

    private async Task LoadCustomersFromServer(Guid? id)
    {
        customerlist = await httpClient.GetFromJsonAsync<List<CustomerViewModel>>($"Customer/GetAllCust{id}");

    }

    async Task AddCustomer(CustomerViewModel customer)
    {
        //customerview = new CustomerViewModel();
        //customerview.Name = NewName;
        //customerview.Surname = NewSurname;
        //customerview.Phone = NewPhone;
        //customerview.TIN = NewTIN;
        //NewName = string.Empty;
        //NewSurname=string.Empty;
        //NewPhone=string.Empty;
        //NewTIN=string.Empty;


        if(customer== null)
        {
            navManager.NavigateTo($"/Customers/AddCustomer/{User.Value}/{null}");
        }
        else
        {
            navManager.NavigateTo($"/Customers/AddCustomer/{User.Value}/{customer.ID}");
        }
        



       // await httpClient.PostAsJsonAsync("Customer", customerview);

        //await LoadCustomersFromServer();

    }
    private void Inactive(CustomerViewModel customer)
    {
        customer.Status = !customer.Status;
    }
    async Task  DeleteCustomer(Guid? User,CustomerViewModel customer)
    {
        //var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        //var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
        if (true)
        {
            var response = await httpClient.DeleteAsync($"Customer/{User.Value}/{customer.ID}");
            response.EnsureSuccessStatusCode();
            await LoadCustomersFromServer(User.Value);
        }
    }
     async Task EraseCustomer(CustomerViewModel customer)
    {
        //var confirm = await jsRuntime.InvokeAsync<bool>("confirmationJS", null);
        //var confirm = await jsRuntime.InvokeAsync<bool>("confirmDelete", null);
        if (true)
        {
            var response = await httpClient.DeleteAsync($"Customer/Erase{customer.ID}");

            response.EnsureSuccessStatusCode();
            await LoadCustomersFromServer(User.Value);
        }
    }
    //private void EditCustomer(CustomerViewModel customer)
    //{
    //    NewName = customer.Name;
    //    NewSurname = customer.Surname;
    //    NewPhone = customer.CardNumber;
       

    //}
    private void DeletedorActiveCustomers()
    {
        ActiveCustomers = !ActiveCustomers;
        LoadCustomersFromServer(User.Value);
    }
   
    private string DeletedCustomers()
    {
        if (!ActiveCustomers)
            return ("Deleted");

        return null;
    }


    }


